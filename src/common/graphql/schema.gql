# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type User {
  _id: ID!
  email: String!
  fullname: String!
  roles: [String!]!
  isActive: String!
  isBlocked: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type AuthResponse {
  token: String!
  user: User!
}

type Category {
  _id: ID!
  name: String!
  image: String
  isActive: String!
  createdAt: DateTime!
  updatedAt: DateTime!

  """Solo para obtener la imagen con cdn"""
  imageCDN: String
}

type CategoryAdminResponse {
  categoria: [Category!]
  totalCategory: Float
}

type CategoryUserResponse {
  categoria: [Category!]
  totalCategoria: Float
  totalPage: Float
}

type Catype {
  _id: ID!
  name: String!
}

type Book {
  _id: ID!
  authorId: ID!
  title: String!
  description: String
  image: String
  categories: [Catype!]
  isActive: Boolean!
  isApproved: Boolean!
  isBlocked: Boolean!
  avgRating: Float!
  ratingCounts: Float!
  reviewCounts: Float!
  commentCounts: Float!
  totalComments: Float!
  total_chapters: Float!
  views: Float!
  authorName: String
  createdAt: DateTime!
  updatedAt: DateTime!
  isCompleted: Boolean!
  isPublished: Boolean!

  """Solo para obtener la imagen con cdn"""
  imageCDN: String
}

type ReportBook {
  _id: ID!
  bookId: ID!
  authorId: ID!
  userIdReport: ID!
  userEmail: String!
  booktitle: String!
  reason: String!
  reasonDetails: String!
  status: Float!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type ReportListResponse {
  reportBook: [ReportBook!]!
  totalPagina: Float!
}

type Bookpart {
  _id: ID!
  bookId: ID!
  authorId: ID!
  title: String!
  content: String
  isActive: Boolean!
  isApproved: Boolean!
  isPublished: Boolean!
  isBlocked: Boolean!
  chapter: Float!
  avgRating: Float!
  ratingCounts: Float!
  reviewCounts: Float!
  totalComments: Float!
  views: Float!
  createdAt: DateTime!
  updatedAt: DateTime!
  publishedOn: DateTime!
}

type getAllBookListReadResponse {
  bookPart: [Bookpart!]!
}

type readBookListReadResponse {
  book: Book
  bookPart: [Bookpart!]
  sigPage: Float
  anteriorPage: Float
}

type Query {
  """Permite traer todo los usuarios de la BD - Rol administrador"""
  getAllUser(query: UserAllQueryArgs!): [User!]!

  """Logea un usuario validado"""
  login(login: LoginInput!): AuthResponse!

  """Desarrollo solo, para comprobar token"""
  revisarToken: AuthResponse!
  getAllCategoryUser(query: QueryCategoryUserArgs!): CategoryUserResponse!

  """Trare una categoria"""
  getIdcategory(id: ID!): Category!
  getAllCategoryAdmin(query: QueryCategoryAdminArgs!): CategoryAdminResponse!

  """Lista de Todo los reporte por query"""
  reportBookAll(query: QueryReportArgs!): ReportListResponse!
  getOneBookpart(id: String!): Bookpart!
  getAllChapter(query: QueryBookAllPartArgs!): getAllBookListReadResponse!
  readBook(read: QueryBookPartArgs!): readBookListReadResponse!
}

input UserAllQueryArgs {
  page: Int! = 1
  perPage: Int! = 1
  search: String!
}

input LoginInput {
  email: String!
  password: String!
}

input QueryCategoryUserArgs {
  page: Int! = 1
  perPage: Int! = 1
}

input QueryCategoryAdminArgs {
  page: Int! = 1
  perPage: Int! = 1
  isActive: Boolean
}

input QueryReportArgs {
  page: Int!
  perPage: Int!
  reportId: String
}

input QueryBookAllPartArgs {
  bookId: String!
  page: Int! = 1
  perPage: Int! = 1
}

input QueryBookPartArgs {
  bookId: String!
  bookChapterId: String
  page: Int! = 1
  perPage: Int! = 1
}

type Mutation {
  """Crea un usuario"""
  createUsers(addUser: SignupInput!): AuthResponse!

  """Permite al adm agregar categoria"""
  addCategoryAdmin(addCategory: CreateCategoryInput!): Category!

  """Permite al adm actualizar la categoria"""
  updateCategoryAdmin(updateCategory: UpdateCategoryInput!): Category!

  """Permite al usuario agregar un libro"""
  addBookUser(addBookUser: CreateBookInput!): Book!

  """
  Permite al usuario actualizar su libro, esta validado que solo el autor quien creo el libro pueda actualizarlo
  """
  updateBookUser(updateBookInput: UpdateBookUserInput!): Book!

  """Permite al admin agregar un libro"""
  addBookAdmin(addBookAdmin: CreateBookInputAdmin!): Book!

  """Permite al admin actualizar un libro"""
  updateBookAdmin(updateBookInput: UpdateBookAdminInput!): Book!

  """Crear reporte de algun libro rol: Usuario y admin"""
  updateReportBook(addReportBook: UpdateReportBookInput!): [ReportBook!]!

  """Crear reporte de algun libro rol: Usuario y admin"""
  addReportBook(addReportBook: ReportBookInput!): ReportBook!

  """Agrega un capitulo al libro"""
  addBookPart(addBookPart: AddBookPart!): Bookpart!

  """edita un capitulo de algun libro"""
  editBookPart(editBookPart: EditBookPart!): Bookpart!
}

input SignupInput {
  fullname: String!
  email: String!
  password: String!
}

input CreateCategoryInput {
  name: String!
  image: String
}

input UpdateCategoryInput {
  name: String
  image: String
  id: String!

  """Permite desactivar alguna categoria"""
  isActive: Boolean
}

input CreateBookInput {
  title: String!
  description: String
  isPublished: Boolean = false
  categories: [JSONObject!]!
}

"""
The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSONObject

input UpdateBookUserInput {
  id: String!
  categories: [JSONObject!]
  title: String
  description: String
  isCompleted: Boolean
}

input CreateBookInputAdmin {
  title: String!
  description: String
  isPublished: Boolean = false
  categories: [JSONObject!]!
}

input UpdateBookAdminInput {
  id: String!
  categories: [JSONObject!]
  title: String
  description: String
  isCompleted: Boolean
  isActive: Boolean
}

input UpdateReportBookInput {
  id: String!
  borrarReporteBD: Float
  desactivarReporte: Float
}

input ReportBookInput {
  bookId: String!
  reason: String!
  reasonDetails: String!
}

input AddBookPart {
  idBook: String!
  title: String!
  content: String!
}

input EditBookPart {
  idpartBook: String!
  title: String
  content: String
}